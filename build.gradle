plugins {
    id 'net.neoforged.gradle' version "${neogradle_version}"
    // Plugin to use the settings.xml for authentication
    id 'net.linguica.maven-settings' version "${maven_settings_version}"
}

apply plugin: 'maven-publish'

version = mod_version
group = mod_packagename
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version as int)

minecraft {
    mappings channel: 'official', version: mod_minecraft_version

    runs {
        client {
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            args = ['--username', "henkelmax${new Random().nextInt(1000)}"]
        }
        server {
            workingDirectory file('run/server')
            property 'forge.logging.console.level', 'debug'
        }
        data {
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://maven.minecraftforge.net' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mod_minecraft_version}-${forge_version}"

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

jar {
    manifest {
        attributes(['Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_vendor,
                    'Specification-Version'   : "1",
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : mod_vendor,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Automatic-Module-Name'   : 'de.maxhenkel.corelib',
        ])
    }
}

tasks.register('deobfJar', Jar) {
    archiveClassifier = 'deobf'
    from sourceSets.main.output
    manifest {
        attributes(['Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_vendor,
                    'Specification-Version'   : '1',
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : mod_vendor,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Automatic-Module-Name'   : 'de.maxhenkel.corelib',
        ])
    }
}

processResources {
    filesMatching('**/*.toml') {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_vendor': mod_vendor,
                'mod_name': mod_name,
                'mod_loader_version': mod_loader_version,
                'mod_forge_version': mod_forge_version,
                'mod_minecraft_version': mod_minecraft_version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar.finalizedBy('reobfJar')

tasks.register('apiJar', Jar) {
    archiveClassifier = 'api'
    from sourceSets.main.output
    exclude 'de/maxhenkel/corelib/dev'
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

javadoc {
    failOnError = false
}

artifacts {
    archives jar
    archives deobfJar
    archives apiJar
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact apiJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            name = 'henkelmax.public'
            url = 'https://maven.maxhenkel.de/repository/public'
        }
    }
}
